// SwiftGen xcassets template for Asprin
{% set enumName %}{{param.enumName|default:"Asset"}}{% endset %}
{% set imageType %}{{param.imageTypeName|default:"ImageAsset"}}{% endset %}
{% set bundleName %}{{param.bundleName|default:"BundleName"}}{% endset %}
{% if catalogs %}
import UIKit

{% macro enumBlock assets sp %}
{{sp}}  {% call casesBlock assets sp %}
{{sp}}  {% if not param.noAllValues %}
{{sp}}  {% endif %}
{% endmacro %}
{% macro casesBlock assets sp %}
{{sp}}  {% for asset in assets %}
{{sp}}  {% if asset.type == "color" %}
{{sp}}  static let {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{colorType}}(name: "{{asset.value}}")
{{sp}}  {% elif asset.type == "image" %}
{{sp}}  static let {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{imageType}}(name: "{{asset.value}}")
{{sp}}  {% elif asset.items %}
{{sp}}  enum {{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {{sp}}    {% set sp2 %}{{sp}}  {% endset %}
    {{sp}}    {% call casesBlock asset.items sp2 %}
    {{sp}}  }
{{sp}}  {% endif %}
{{sp}}  {% endfor %}
{% endmacro %}
{% macro allValuesBlock assets filter prefix sp %}
{{sp}}  {% for asset in assets %}
{{sp}}  {% if asset.type == filter %}
{{sp}}  {{prefix}}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}},
{{sp}}  {% elif asset.items %}
{{sp}}  {% set prefix2 %}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.{% endset %}
{{sp}}  {% call allValuesBlock asset.items filter prefix2 sp %}
{{sp}}  {% endif %}
{{sp}}  {% endfor %}
{% endmacro %}
enum {{enumName}} {
{% if catalogs.count > 1 %}
    {% for catalog in catalogs %}
    enum {{catalog.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% call enumBlock catalog.assets "    " %}
    }
    {% endfor %}
    {% else %}
    {% call enumBlock catalogs.first.assets "" %}
    {% endif %}
}

struct {{imageType}} {
    fileprivate var name: String
    var image: UIImage {
        let bundle = ZGERPModuleAssets.currentBundle()
        let image = UIImage(named: name, in: bundle, compatibleWith: nil)
        guard let result = image else { 
            fatalError("Unable to load image named \(name).") 
        }
        return result
    }
}

class ZGERPModuleAssets: NSObject {

    /// 获取当前库包
    internal class func currentBundle() -> Bundle {
        let podBundle = Bundle(for: {{bundleName}}.self)

        if let bundleURL = podBundle.url(forResource: "{{bundleName}}", withExtension: "bundle") {
            if let bundle = Bundle(url: bundleURL) {
                return bundle
            } else {
                return podBundle
            }
        } else {
            return podBundle
        }
    }
}
{% else %}
// No assets found
{% endif %}

